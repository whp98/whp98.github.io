import{_ as a,c as s,o as n,ag as p}from"./chunks/framework.8SQNO8WI.js";const o=JSON.parse('{"title":"Spring实战第一章Spring之旅笔记","description":"","frontmatter":{"title":"Spring实战第一章Spring之旅笔记","tags":["Spring","Spring实战"],"abbrlink":"5a27","date":"2020-04-29T14:31:58.000Z"},"headers":[],"relativePath":"后端开发/Spring/String-practice-chp1.md","filePath":"后端开发/Spring/String-practice-chp1.md","lastUpdated":1726751071000}'),e={name:"后端开发/Spring/String-practice-chp1.md"};function t(r,i,l,h,g,d){return n(),s("div",null,[...i[0]||(i[0]=[p(`<h1 id="spring实战第一章spring之旅笔记" tabindex="-1">Spring实战第一章Spring之旅笔记 <a class="header-anchor" href="#spring实战第一章spring之旅笔记" aria-label="Permalink to &quot;Spring实战第一章Spring之旅笔记&quot;">​</a></h1><p>Spring的两个核心特性是，依赖注入（dependency injection，DI）和面向切片编程（aspect-oriented programming，AOP）</p><p>Spring提供了轻量级和简单的编程模型来替代重量级的企业级Java技术，它增强了简单老式的Java对象（Plain Old Java Object， POJO），</p><p>让其具备了之前之后（Enterprise JavaBean，EJB）才有的的功能。</p><p>Spring最早由Rod Johnson创建，是为了简化Java开发，降低企业开发的复杂性而创建的，对于这个目标Spring采用四种关键策略：</p><ul><li>基于POJO的轻量级和面向接口的最小侵入式编程；</li><li>通过依赖注入和面向接口实现松耦合；</li><li>基于切面和管理进行声明式编程；</li><li>通过切面和模板减少样式代码</li></ul><p>Spring尽量避免自身的API影响到你的代码，不会强制你继承Spring类或者实现某个Spring接口，因为以上的操作会导致你的代码和框架绑死。</p><p>Spring最坏的情况乱下是你的代码中发使用了Spring注解，但你的代码依然是POJO，通过下面例子说明Spring的Bean的普通和不易察觉。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HelloWorldBean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sayHello</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>上面的例子就是一个POJO，你看不出它是一个Spring组件，这就是Spring非侵入式编程的特点，这意味着无论是Spring应用和非Spring应用都能，发挥同样的作用。 上面的Bean看上去很简单，Spring可以让POJO具有强大的功能，Spring发挥作用的方式就是通过DI来装配Bean。</p><h2 id="依赖注入" tabindex="-1">依赖注入 <a class="header-anchor" href="#依赖注入" aria-label="Permalink to &quot;依赖注入&quot;">​</a></h2><p>依赖注入是一个听上去高大上的词汇，DI已经演变成为一系列复杂的编程技巧和设计模式理念，在项目中使用依赖注入将会使项目的代码变得简单和容易理解和测试。</p><p>依赖注是如何实现的呢</p><h3 id="解决高度的耦合性" tabindex="-1">解决高度的耦合性 <a class="header-anchor" href="#解决高度的耦合性" aria-label="Permalink to &quot;解决高度的耦合性&quot;">​</a></h3><p>正常情况下，一个有实际意义的类，会有几个互相协作的类组成，每一个对象会负责管理和自己协作的对象的引用，这导致高度的耦合，并且难以测试。</p>`,15)])])}const k=a(e,[["render",t]]);export{o as __pageData,k as default};
