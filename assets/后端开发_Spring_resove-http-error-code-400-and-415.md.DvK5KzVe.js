import{_ as a,c as i,o as n,ag as e}from"./chunks/framework.8SQNO8WI.js";const c=JSON.parse('{"title":"Spring 框架接口接收数据报400或415","description":"","frontmatter":{},"headers":[],"relativePath":"后端开发/Spring/resove-http-error-code-400-and-415.md","filePath":"后端开发/Spring/resove-http-error-code-400-and-415.md","lastUpdated":1726751071000}'),t={name:"后端开发/Spring/resove-http-error-code-400-and-415.md"};function p(l,s,h,k,r,d){return n(),i("div",null,[...s[0]||(s[0]=[e(`<h1 id="spring-框架接口接收数据报400或415" tabindex="-1">Spring 框架接口接收数据报400或415 <a class="header-anchor" href="#spring-框架接口接收数据报400或415" aria-label="Permalink to &quot;Spring 框架接口接收数据报400或415&quot;">​</a></h1><h2 id="先看400报错" tabindex="-1">先看400报错 <a class="header-anchor" href="#先看400报错" aria-label="Permalink to &quot;先看400报错&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>HTTP Status 400 – Bad Request</span></span>
<span class="line"><span>Type Status Report</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Message Required XXXDTO parameter &#39;XXXDTO&#39; is not present</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Description The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Apache Tomcat/8.0.0</span></span></code></pre></div><p>大概意思是XXXDTO这个参数没有在参数中出现。</p><p>看下接口是怎么写的</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">RequestMapping</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;/getXXXList.action&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">method</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {RequestMethod.POST}, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">produces</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;application/json;charset=UTF-8&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ResponseBody</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> xxxResponse</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">xxxVO</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getMainList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">RequestParam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> XXXDTO XXXDTO) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ... ...</span></span></code></pre></div><p>经过查询知道<code>@RequestParam</code>这个注解用于get请求获取参数使用。 而本请求是post请求，并且使用实体入参，如果传参为json字符串那么应该使用的正确的注解是<code>@RequestBody</code>,如果入参为表单或json对象的话那么不使用注解即可。</p><p>本请求通过浏览器调试查询payload发现是表单post请求，只需要将注解去掉即可。</p><h2 id="_415报错" tabindex="-1">415报错 <a class="header-anchor" href="#_415报错" aria-label="Permalink to &quot;415报错&quot;">​</a></h2><p>报错内容</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>HTTP Status 415 – Unsupported Media Type</span></span>
<span class="line"><span>Type Status Report</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Description The origin server is refusing to service the request because the payload is in a format not supported by this method on the target resource.</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Apache Tomcat/8.0.0</span></span></code></pre></div><p>报错后台接口</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">RequestMapping</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;/getDetailList.action&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">method</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {RequestMethod.POST}, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">produces</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;application/json;charset=UTF-8&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ResponseBody</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> XXXResponse</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">XXXDetailVO</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getDetailList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">RequestBody</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> XXXDTO XXXDTO) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ... ...</span></span></code></pre></div><p>浏览器请求，payload查看负载,查看源</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>pagex=1&amp;startx=0&amp;limitx=20</span></span></code></pre></div><p>这个是表单post请求。</p><p>和上面的一样只要去掉<code>@RequestBody</code>这个注解即可。</p><p>同样的如果post请求查看源中是json字符串数据，那么就需要加上这个注解来解析。</p>`,18)])])}const g=a(t,[["render",p]]);export{c as __pageData,g as default};
