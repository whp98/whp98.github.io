import{_ as e,c as t,o as r,ag as p}from"./chunks/framework.8SQNO8WI.js";const c=JSON.parse('{"title":"WEB架构演进","description":"","frontmatter":{},"headers":[],"relativePath":"系统架构/WEB架构演进.md","filePath":"系统架构/WEB架构演进.md","lastUpdated":1726751071000}'),o={name:"系统架构/WEB架构演进.md"};function l(s,a,i,n,d,h){return r(),t("div",null,[...a[0]||(a[0]=[p('<h1 id="web架构演进" tabindex="-1">WEB架构演进 <a class="header-anchor" href="#web架构演进" aria-label="Permalink to &quot;WEB架构演进&quot;">​</a></h1><p>本文从前到后描述的网站架构演进的过程。</p><h2 id="web1-0" tabindex="-1">web1.0 <a class="header-anchor" href="#web1-0" aria-label="Permalink to &quot;web1.0&quot;">​</a></h2><p>最初网站是静态网站，用户访问网站获取静态web界面，一般是html js css 文件。 特点是从服务器单向为用户提供信息。</p><h2 id="单体web架构" tabindex="-1">单体web架构 <a class="header-anchor" href="#单体web架构" aria-label="Permalink to &quot;单体web架构&quot;">​</a></h2><p>开发好之后将应用打包成war包，其中包含servlet，静态文件。这种一般一台服务器即可，服务器上需要包含数据库，用户文件也保存在服务器上。</p><p>随着用户增加，服务器空间占用越来越大，随后可以将文件服务独立出来，将文件单独保存在文件服务器上。数据库服务器也需要独立部署一台服务器，确保应用服务器出问题的时候数据库还能正常访问。</p><p>这里的不同服务器各司其职，增加了各个服务器的空间，可以增加一定的业务承载量。</p><p>等用户量更多之后数据库服务器会遇到瓶颈，这时候可以引入缓存中间件，数据库访问会先落到缓存中间件。命中缓存之后会直接返回，不命中才会访问数据库。</p><p>目前应用还是单体部署，如果服务器宕机，会给企业带来毁灭性伤害。</p><h2 id="集群部署" tabindex="-1">集群部署 <a class="header-anchor" href="#集群部署" aria-label="Permalink to &quot;集群部署&quot;">​</a></h2><p>为了防止出现单体故障，可以将应用集群化部署，这样即使出现宕机也可以使用集群中的其他节点。</p><p>应用，文件，缓存，数据库等都可以部署成集群，成为集群之后涉及到负载均衡。</p><p>数据库读写分离，等用户增加到上千万的时候可以将数据库读写分开。</p><p>用户增到700W-800W，分库分表是最后的手段，会将不同的表散列在不同的数据库节点中，这里有不同的算法来进行节点分布。</p><p>这时候会引入搜索引擎作为搜索的支持，不会将用户的搜索请求落到数据库。</p><h2 id="合久必分-微服务" tabindex="-1">合久必分-微服务 <a class="header-anchor" href="#合久必分-微服务" aria-label="Permalink to &quot;合久必分-微服务&quot;">​</a></h2><p>不同的服务需要拆分出来，同时数据库也会拆分出来，这时候每个服务就是一个系统，分别提供不同的服务。</p><p>这时候开发测试运维的工作都会变的更加复杂。</p><p>这里涉及到分布式锁，消息队列，异步调用。</p><p>这里还有各种调优能力是架构的能力要求。</p>',21)])])}const b=e(o,[["render",l]]);export{c as __pageData,b as default};
