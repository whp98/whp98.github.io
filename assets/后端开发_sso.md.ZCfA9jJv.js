import{_ as e,c as t,o,ag as r}from"./chunks/framework.8SQNO8WI.js";const p=JSON.parse('{"title":"单点登录","description":"","frontmatter":{},"headers":[],"relativePath":"后端开发/sso.md","filePath":"后端开发/sso.md","lastUpdated":1726751071000}'),l={name:"后端开发/sso.md"};function i(s,a,n,d,x,c){return o(),t("div",null,[...a[0]||(a[0]=[r('<h1 id="单点登录" tabindex="-1">单点登录 <a class="header-anchor" href="#单点登录" aria-label="Permalink to &quot;单点登录&quot;">​</a></h1><h2 id="单点登录是啥" tabindex="-1">单点登录是啥 <a class="header-anchor" href="#单点登录是啥" aria-label="Permalink to &quot;单点登录是啥&quot;">​</a></h2><p>单点登录是用于用户验证的一种方式，特点是多个业务系统使用同一个验证系统来对用户进行校验。 一般单点登录系统被称作<code>xx统一认证平台</code>。 优点：</p><ul><li>用户可以使用同一个界面登录多个系统</li><li>可以减少密码输入的频率，当用户已经在线可以直接跳转到业务系统</li></ul><p>缺点:</p><ul><li>可能会引发单点故障，认证系统出现问题后会导致大量系统无法使用</li><li>信息安全可能会有问题，一个账号密码泄露会导致多个系统被登录</li></ul><h2 id="单点登录流程" tabindex="-1">单点登录流程 <a class="header-anchor" href="#单点登录流程" aria-label="Permalink to &quot;单点登录流程&quot;">​</a></h2><p>情景1：用户还没登录 1.用户想要使用xx业务系统 2.xx业务系统将用户重定向到xx统一认证 3.用户输入账号密码登录，xx统一认证平台将用户重定向到xx业务系统（带授权token） 4.业务系统将用户设置为登录状态</p><p>情景2：用户登录了xx系统要用yy系统 1.用户访问yy系统，需要登录，重定向用户到xx统一认证 2.xx统一认证直接读取浏览器的登录信息，跳转到yy系统带授权token 3.用户设置为登录状态</p><h2 id="业务系统的预留" tabindex="-1">业务系统的预留 <a class="header-anchor" href="#业务系统的预留" aria-label="Permalink to &quot;业务系统的预留&quot;">​</a></h2><p>通过请求来获取request对象，解析三方系统中带的token，通过token中带的信息获取用户数据。 通过无密码登录接口将用户设置为登录状态。</p>',11)])])}const _=e(l,[["render",i]]);export{p as __pageData,_ as default};
