import{_ as a,c as e,o as i,ag as t}from"./chunks/framework.8SQNO8WI.js";const c=JSON.parse('{"title":"docker-compose中如何访问宿主机的网络（设置代理）","description":"","frontmatter":{},"headers":[],"relativePath":"容器技术/docker-compose中如何访问宿主机的网络.md","filePath":"容器技术/docker-compose中如何访问宿主机的网络.md","lastUpdated":1731042690000}'),n={name:"容器技术/docker-compose中如何访问宿主机的网络.md"};function o(p,s,l,h,r,k){return i(),e("div",null,[...s[0]||(s[0]=[t(`<h1 id="docker-compose中如何访问宿主机的网络-设置代理" tabindex="-1">docker-compose中如何访问宿主机的网络（设置代理） <a class="header-anchor" href="#docker-compose中如何访问宿主机的网络-设置代理" aria-label="Permalink to &quot;docker-compose中如何访问宿主机的网络（设置代理）&quot;">​</a></h1><h2 id="对于需要访问宿主机器的容器" tabindex="-1">对于需要访问宿主机器的容器 <a class="header-anchor" href="#对于需要访问宿主机器的容器" aria-label="Permalink to &quot;对于需要访问宿主机器的容器&quot;">​</a></h2><p>可以看如下的应用配置：</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">services</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  my_service</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    extra_hosts</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;host.docker.internal:host-gateway&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    environment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">no_proxy=localhost,127.0.0.1,host.docker.internal</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">https_proxy=http://host.docker.internal:20003</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">http_proxy=http://host.docker.internal:20003</span></span></code></pre></div><p><code>host-gateway</code>是docker默认提供的一个网关，通过这个网关，可以访问宿主机的网卡。 <code>host.docker.internal</code>是docker-desktop默认提供的一个域名，通过这个域名，可以访问宿主机的端口。 <code>extra_hosts</code>可以添加一些自定义的域名docker，通过这个域名，可以配置使用host.docker.internal这个指向宿主的ip，从而可以访问宿主机的端口。 <code>environment</code>可以设置一些环境变量，包括代理等。</p><p>上面的配置，配置容器使用宿主机器的代理，并且可以访问宿主机的端口。</p>`,6)])])}const E=a(n,[["render",o]]);export{c as __pageData,E as default};
